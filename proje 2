# Gerekli Kütüphanelerin Yüklenmesi
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report

# Veri Kümesini Yükleme
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']
iris = pd.read_csv(url, header=None, names=column_names)

# İlk birkaç satırı gösterme
print("İlk birkaç satır:")
print(iris.head())

# Veri Temizleme
# Eksik değerleri kontrol etme
print("\nEksik değerlerin kontrolü:")
print(iris.isnull().sum())

# Veri türlerini kontrol etme
print("\nVeri türlerinin kontrolü:")
print(iris.dtypes)

# Keşifsel Veri Analizi (EDA)
# Temel istatistikleri hesaplama
print("\nTemel istatistikler:")
print(iris.describe())

# Sınıf dağılımını gösterme
print("\nSınıf dağılımı:")
print(iris['class'].value_counts())

# Veri Görselleştirme
# Çiftler arası ilişkileri gösteren bir pairplot oluşturma
print("\nPairplot oluşturuluyor...")
sns.pairplot(iris, hue='class')
plt.show()

# Korelasyon matrisini ısı haritası ile gösterme
print("\nKorelasyon matrisinin ısı haritası:")
plt.figure(figsize=(10, 7))
# 'class' sütununu çıkararak sadece sayısal sütunlarla korelasyon matrisini hesaplayın
numeric_columns = iris.drop(columns=['class'])
sns.heatmap(numeric_columns.corr(), annot=True, cmap='coolwarm')
plt.show()

# Sınıf etiketlerini sayısal değerlere dönüştürme
iris['class'] = iris['class'].astype('category').cat.codes

# Veriyi özellikler (X) ve hedef (y) olarak ayırın
X = iris.drop('class', axis=1)
y = iris['class']

# Veriyi eğitim ve test setlerine ayırın
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standartlaştırıcıyı oluşturun ve eğitin, ardından eğitim ve test verilerini dönüştürün
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Lojistik regresyon modelini oluşturun
model = LogisticRegression(max_iter=200)
# Modeli eğitim verileriyle eğitin
model.fit(X_train, y_train)

# Modelin test setindeki tahminlerini alın
y_pred = model.predict(X_test)

# Performans metriklerini hesaplayın
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='macro')
recall = recall_score(y_test, y_pred, average='macro')

# Karışıklık matrisi
conf_matrix = confusion_matrix(y_test, y_pred)

# Sınıflandırma raporu
class_report = classification_report(y_test, y_pred)

# Performans metriklerini ve karışıklık matrisini yazdırın
print(f"\nModel Performans Metrikleri:\nAccuracy: {accuracy}\nPrecision: {precision}\nRecall: {recall}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)

# Karışıklık matrisini görselleştirme
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Raporlama
# Bulgu ve içgörülerinizi özetleyen bir rapor oluşturma
print("\nRaporlama:")
print("""
- Veri kümesinin genel özellikleri: Iris veri kümesi, iris çiçeklerinin sepal uzunluğu, sepal genişliği, petal uzunluğu ve petal genişliği gibi özelliklerini içerir. 
- Sınıf dağılımları: Üç farklı sınıf (setosa, versicolor, virginica) vardır ve her bir sınıf eşit sayıda gözlem içermektedir.
- Önemli korelasyonlar: Sepal genişliği ve uzunluğu ile petal genişliği ve uzunluğu arasında belirgin bir korelasyon gözlemlenmiştir.
- Dikkat çekici trendler: Setosa sınıfı, diğer sınıflardan belirgin bir şekilde ayrılmaktadır ve özellikle petal uzunluğu ve genişliği açısından farklılık göstermektedir.
- Model Performansı: 
  - Doğruluk (Accuracy): 0.93
  - Kesinlik (Precision): 0.94
  - Duyarlılık (Recall): 0.93
- Modelin iyileştirilmesi için öneriler:
  - Daha fazla veri toplayarak modelin genelleme yeteneği artırılabilir.
  - Farklı makine öğrenimi modelleri deneyerek performans karşılaştırması yapılabilir.
  - Özellik mühendisliği yapılarak modelin performansı artırılabilir.
  - Modelin hiperparametreleri optimize edilerek daha iyi sonuçlar elde edilebilir.
  - Veri dengesizliği durumunda, SMOTE gibi tekniklerle veri çoğaltma veya sınıf ağırlıklarını ayarlama stratejileri kullanılabilir.
""")


